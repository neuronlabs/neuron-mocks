package mocks

import (
	"context"

	"github.com/neuronlabs/neuron-core/mapping"
	"github.com/stretchr/testify/mock"

	"github.com/neuronlabs/neuron-core/query"
	"github.com/neuronlabs/neuron-core/repository"
)

// DriverName is the driver name used by this mocks factory and repository.
const DriverName = "neuron-mockery"

func init() {
	if err := repository.RegisterFactory(&Factory{}); err != nil {
		panic(err)
	}
}

/**

Repository

*/

var (
	// compile time check for the query.FullRepository implementation.
	_ query.FullRepository = &Repository{}
	// compile time check for the repository.Repository implementation.
	_ repository.Repository = &Repository{}
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Begin provides a mock function with given fields: ctx, s
func (_m *Repository) Begin(ctx context.Context, tx *query.Tx, m *mapping.ModelStruct) error {
	ret := _m.Called(ctx, tx, m)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *query.Tx, *mapping.ModelStruct) error); ok {
		r0 = rf(ctx, tx, m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close closes the repository connection.
func (_m *Repository) Close(ctx context.Context) error {
	return nil
}

// Commit provides a mock function with given fields: ctx, m.
func (_m *Repository) Commit(ctx context.Context, tx *query.Tx, m *mapping.ModelStruct) error {
	ret := _m.Called(ctx, tx, m)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *query.Tx, *mapping.ModelStruct) error); ok {
		r0 = rf(ctx, tx, m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Count provides a mock function with given fields: ctx, s
func (_m *Repository) Count(ctx context.Context, s *query.Scope) (int64, error) {
	ret := _m.Called(ctx, s)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, *query.Scope) int64); ok {
		r0 = rf(ctx, s)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *query.Scope) error); ok {
		r1 = rf(ctx, s)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, s
func (_m *Repository) Create(ctx context.Context, s *query.Scope) error {
	ret := _m.Called(ctx, s)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *query.Scope) error); ok {
		r0 = rf(ctx, s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, s
func (_m *Repository) Delete(ctx context.Context, s *query.Scope) error {
	ret := _m.Called(ctx, s)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *query.Scope) error); ok {
		r0 = rf(ctx, s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Dial implements repository.Repository interface.
func (_m *Repository) Dial(context.Context) error {
	return nil
}

// Get provides a mock function with given fields: ctx, s
func (_m *Repository) Get(ctx context.Context, s *query.Scope) error {
	ret := _m.Called(ctx, s)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *query.Scope) error); ok {
		r0 = rf(ctx, s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

func (_m *Repository) HealthCheck(ctx context.Context) (*repository.HealthResponse, error) {
	return &repository.HealthResponse{Status: repository.StatusPass}, nil
}

// List provides a mock function with given fields: ctx, s
func (_m *Repository) List(ctx context.Context, s *query.Scope) error {
	ret := _m.Called(ctx, s)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *query.Scope) error); ok {
		r0 = rf(ctx, s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ModelTxID implements query.Transactioner interface.
func (_m *Repository) ModelTxID(model *mapping.ModelStruct) (string, error) {
	return "neuron-mocks_" + model.String(), nil
}

// Patch provides a mock function with given fields: ctx, s
func (_m *Repository) Patch(ctx context.Context, s *query.Scope) error {
	ret := _m.Called(ctx, s)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *query.Scope) error); ok {
		r0 = rf(ctx, s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterModels implements repository.Repository interface.
func (_m *Repository) RegisterModels(models ...*mapping.ModelStruct) error {
	return nil
}

// Rollback provides a mock function with given fields: ctx, s
func (_m *Repository) Rollback(ctx context.Context, tx *query.Tx, m *mapping.ModelStruct) error {
	ret := _m.Called(ctx, tx, m)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *query.Tx, *mapping.ModelStruct) error); ok {
		r0 = rf(ctx, tx, m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FactoryName provides a mock function that implements FactoryName method.
func (_m *Repository) FactoryName() string {
	return DriverName
}
