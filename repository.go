package mocks

import (
	"context"

	"github.com/google/uuid"

	"github.com/neuronlabs/neuron/mapping"
	"github.com/neuronlabs/neuron/repository"

	"github.com/stretchr/testify/mock"

	"github.com/neuronlabs/neuron/query"
)

/**

Repository

*/

var (
	// compile time check for the query.FullRepository implementation.
	_ repository.Repository = &Repository{}
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	id uuid.UUID
	mock.Mock
}

// New creates new mock repository.
func New() *Repository {
	return &Repository{
		id: uuid.New(),
	}
}

// Exists implements query.Exister interface.
func (_m *Repository) Exists(ctx context.Context, s *query.Scope) (bool, error) {
	ret := _m.Called(ctx, s)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *query.Scope) bool); ok {
		r0 = rf(ctx, s)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *query.Scope) error); ok {
		r1 = rf(ctx, s)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ID implements repository.Repository.
func (_m *Repository) ID() string {
	return _m.id.String()
}

// Begin provides a mock function with given fields: ctx, s
func (_m *Repository) Begin(ctx context.Context, tx *query.Transaction) error {
	ret := _m.Called(ctx, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *query.Transaction) error); ok {
		r0 = rf(ctx, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close closes the repository connection.
func (_m *Repository) Close(context.Context) error {
	return nil
}

// Commit provides a mock function with given fields: ctx, m.
func (_m *Repository) Commit(ctx context.Context, tx *query.Transaction) error {
	ret := _m.Called(ctx, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *query.Transaction) error); ok {
		r0 = rf(ctx, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Count provides a mock function with given fields: ctx, s
func (_m *Repository) Count(ctx context.Context, s *query.Scope) (int64, error) {
	ret := _m.Called(ctx, s)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, *query.Scope) int64); ok {
		r0 = rf(ctx, s)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *query.Scope) error); ok {
		r1 = rf(ctx, s)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, s
func (_m *Repository) Insert(ctx context.Context, s *query.Scope) error {
	ret := _m.Called(ctx, s)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *query.Scope) error); ok {
		r0 = rf(ctx, s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, s
func (_m *Repository) Delete(ctx context.Context, s *query.Scope) (int64, error) {
	ret := _m.Called(ctx, s)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, *query.Scope) int64); ok {
		r0 = rf(ctx, s)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *query.Scope) error); ok {
		r1 = rf(ctx, s)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Dial implements repository.Repository interface.
func (_m *Repository) Dial(context.Context) error {
	return nil
}

// HealthCheck implements repository.Repository interface.
func (_m *Repository) HealthCheck(context.Context) (*repository.HealthResponse, error) {
	return &repository.HealthResponse{Status: repository.StatusPass}, nil
}

// Find provides a mock function with given fields: ctx, s
func (_m *Repository) Find(ctx context.Context, s *query.Scope) error {
	ret := _m.Called(ctx, s)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *query.Scope) error); ok {
		r0 = rf(ctx, s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, s
func (_m *Repository) Update(ctx context.Context, s *query.Scope) (int64, error) {
	ret := _m.Called(ctx, s)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, *query.Scope) int64); ok {
		r0 = rf(ctx, s)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *query.Scope) error); ok {
		r1 = rf(ctx, s)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterModels implements repository.Repository interface.
func (_m *Repository) RegisterModels(...*mapping.ModelStruct) error {
	return nil
}

// Rollback provides a mock function with given fields: ctx, s
func (_m *Repository) Rollback(ctx context.Context, tx *query.Transaction) error {
	ret := _m.Called(ctx, tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *query.Transaction) error); ok {
		r0 = rf(ctx, tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
